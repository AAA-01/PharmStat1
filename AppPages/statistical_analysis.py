from STATANALYZE.analyzer import analyze_groups
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import os

__all__ = ["show"]

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def show(language=None):
    st.title("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx", "xls"])

    if not uploaded_file:
        return

    df = pd.read_excel(uploaded_file)

    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.write("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(df.columns)}")
        st.write(f"–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–æ–∫: {len(df)}")

    # üîπ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤—ã–±–æ—Ä–æ–∫
    sample_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–±–æ—Ä–æ–∫:",
        ["–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "–ó–∞–≤–∏—Å–∏–º—ã–µ (–ø–∞—Ä–Ω—ã–µ)"],
    )
    paired = sample_type == "–ó–∞–≤–∏—Å–∏–º—ã–µ (–ø–∞—Ä–Ω—ã–µ)"

    # üîπ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
    alpha = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha):",
        [0.01, 0.025, 0.05, 0.1],
        index=2,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.05
    )

    # üîπ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤—ã–±–æ—Ä—É alpha
    st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏:**")
    if alpha == 0.05:
        st.info(
            "üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –Ω–∞—É–∫. –û–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
            "–°–º.: [ICH E9 Statistical Principles](https://www.ich.org/page/efficacy-guidelines)"
        )
    elif alpha == 0.025:
        st.info(
            "üîπ –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ç–µ—Å—Ç—ã, 90% –î–ò).\n"
            "–°–º.: [EMA Bioequivalence Guideline](https://www.ema.europa.eu/en/documents/scientific-guideline/guideline-investigation-bioequivalence_en.pdf)"
        )
    elif alpha == 0.01:
        st.warning(
            "üîπ –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥, —Ç–∏–ø–∏—á–Ω—ã–π –¥–ª—è —Ñ–∞—Ä–º-–∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n"
            "–°–º.: [FDA Process Validation Guidance 2011](https://www.fda.gov/media/71021/download)"
        )
    elif alpha == 0.1:
        st.info(
            "üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö. –í —Ñ–∞—Ä–º–µ –ø–æ—á—Ç–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è."
        )

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    st.write("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.dataframe(df.head())

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥—Ä—É–ø–ø
    groups = [df[col].dropna().tolist() for col in df.columns]

    try:
        result = analyze_groups(groups, paired=paired, alpha=alpha)

        st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        col1, col2 = st.columns(2)
        with col1:
            st.info(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ—Å—Ç:** {result['test_used']}")
            st.info(f"**–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏:** Œ± = {result['alpha']}")
        with col2:
            st.info(f"**–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:** {result['statistic']:.4f}")
            st.info(f"**p-value:** {result['p_value']:.4f}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
        st.write("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        st.write("–¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã:")

        cols = st.columns(4)
        normal_groups, non_normal_groups = [], []

        for i, (p_value, _) in enumerate(zip(result["shapiro_p"], df.columns)):
            with cols[i % 4]:
                if p_value > result["alpha"]:
                    normal_groups.append(str(i + 1))
                    st.success(f"–ì—Ä—É–ø–ø–∞ {i+1}: ‚úì")
                else:
                    non_normal_groups.append(str(i + 1))
                    st.error(f"–ì—Ä—É–ø–ø–∞ {i+1}: ‚úó")
                st.caption(f"p = {p_value:.4f}")

        # –ò—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
        st.write("–ò—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏:")
        st.info(
            f"**–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø** (p > 0.05): {', '.join(normal_groups)}\n\n"
            f"**–ù–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø** (p < 0.05): {', '.join(non_normal_groups)}\n\n"
            f"–î–ª—è {len(normal_groups)} –≥—Ä—É–ø–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É, "
            f"–Ω–æ –¥–ª—è {len(non_normal_groups)} –≥—Ä—É–ø–ø –æ–Ω–æ —è–≤–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ."
        )

        with st.expander("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"):
            st.write(
                "- **p-value > 0.05**: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ ‚úì\n"
                "- **p-value ‚â§ 0.05**: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ ‚úó"
            )

        # –¢–µ—Å—Ç –õ–µ–≤–µ–Ω–∞
        if result["levene_p"] is not None:
            st.write("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–π")
            if result["levene_p"] > result["alpha"]:
                st.success(f"–î–∏—Å–ø–µ—Ä—Å–∏–∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã (—Ç–µ—Å—Ç –õ–µ–≤–µ–Ω–∞, p = {result['levene_p']:.4f})")
            else:
                st.warning(f"–î–∏—Å–ø–µ—Ä—Å–∏–∏ –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã (—Ç–µ—Å—Ç –õ–µ–≤–µ–Ω–∞, p = {result['levene_p']:.4f})")

        # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
        if result["p_value"] < alpha:
            st.success("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è (p < alpha).")
        else:
            st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ (p ‚â• alpha).")

        # –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        all_data = [
            {
                "–ì—Ä—É–ø–ø–∞": f"{i}: {df.columns[i-1]}",
                "n": summary["n"],
                "–°—Ä–µ–¥–Ω–µ–µ": summary["mean"],
                "–ú–µ–¥–∏–∞–Ω–∞": summary["median"],
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": summary["std"],
                "–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)": summary["iqr"],
                "–î–∏—Å–ø–µ—Ä—Å–∏—è": summary["var"],
            }
            for i, summary in enumerate(result["group_summary"], start=1)
        ]
        full_df = pd.DataFrame(all_data)
        st.subheader("–ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        st.dataframe(full_df, use_container_width=True)

        # Boxplot
        st.subheader("Boxplot")
        fig, ax = plt.subplots()
        df.boxplot(ax=ax)
        st.pyplot(fig)

        # Density plot
        st.subheader("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (KDE)")
        fig, ax = plt.subplots()
        for col in df.columns:
            sns.kdeplot(df[col].dropna(), label=col, fill=True, ax=ax)
        ax.legend()
        st.pyplot(fig)

    except ValueError as e:
        st.error(str(e))
